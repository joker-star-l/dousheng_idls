// Code generated by Kitex v0.4.4. DO NOT EDIT.

package user

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "github.com/joker-star-l/dousheng_idls/user/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "User"
	handlerType := (*api.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"userInfo": kitex.NewMethodInfo(userInfoHandler, newUserUserInfoArgs, newUserUserInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.UserUserInfoArgs)
	realResult := result.(*api.UserUserInfoResult)
	success, err := handler.(api.User).UserInfo(ctx, realArg.UserId, realArg.QueryId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserUserInfoArgs() interface{} {
	return api.NewUserUserInfoArgs()
}

func newUserUserInfoResult() interface{} {
	return api.NewUserUserInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserInfo(ctx context.Context, userId int64, queryId int64) (r *api.UserInfoResponse, err error) {
	var _args api.UserUserInfoArgs
	_args.UserId = userId
	_args.QueryId = queryId
	var _result api.UserUserInfoResult
	if err = p.c.Call(ctx, "userInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
